########################################
# PLANTILLA DE VARIABLES DE ENTORNO
# Copia este archivo como .env y ajusta los valores según tu entorno
########################################

# --- Servidor ---
# Puerto donde corre el backend NestJS
PORT=3000

# Ambiente de ejecución: development | production | test
NODE_ENV=development

# Host de escucha (127.0.0.1 para solo local, 0.0.0.0 para aceptar conexiones externas)
HOST=127.0.0.1

# --- Base de Datos PostgreSQL ---
# Host del servidor PostgreSQL (localhost en desarrollo, nombre del servicio en Docker)
DB_HOST=localhost

# Puerto de PostgreSQL (5432 por defecto)
DB_PORT=5432

# Credenciales de base de datos
# ⚠️ CAMBIAR EN PRODUCCIÓN con valores seguros
DB_USERNAME=tu_usuario_postgres
DB_PASSWORD=tu_password_seguro
DB_NAME=bd_barberia

# Sincronización automática de esquema (true solo en desarrollo, false en producción)
# ⚠️ NUNCA usar true en producción - usa migraciones
# true = TypeORM crea/actualiza tablas automáticamente (rápido para desarrollo)
# false = Requiere ejecutar migraciones manualmente (seguro para producción)
DB_SYNCHRONIZE=true

# Logs de queries SQL (true en desarrollo para debug, false en producción)
DB_LOGGING=true

# --- CORS - Frontend URL ---
# URL del frontend para permitir CORS
# Desarrollo: http://localhost:5173
# Producción: https://tudominio.com
FRONTEND_URL=http://localhost:5173

# --- JWT Secrets ---
# ⚠️ CRÍTICO: Genera secrets únicos y fuertes para producción
# Puedes generarlos con: node -e "console.log(require('crypto').randomBytes(32).toString('base64'))"
JWT_ACCESS_SECRET=tu_secret_de_access_token_cambiar_en_produccion
JWT_REFRESH_SECRET=tu_secret_de_refresh_token_cambiar_en_produccion

# Tiempo de expiración de tokens JWT
# Access token (corto, recomendado: 15m a 1h)
JWT_ACCESS_EXPIRES=15m

# Refresh token (largo, recomendado: 7d a 30d)
JWT_REFRESH_EXPIRES=7d

# --- Rate Limiting (Throttle) ---
# Tiempo en milisegundos para el rate limit
THROTTLE_TTL=60000

# Número máximo de requests en el periodo TTL
THROTTLE_LIMIT=50

# --- Seguridad de Cookies ---
# Secure cookies (true en producción con HTTPS, false en desarrollo local)
COOKIE_SECURE=false

# SameSite policy: strict | lax | none
COOKIE_SAMESITE=lax

# Prefijo de host en cookies (false en desarrollo)
COOKIE_PREFIX_HOST=false

# Habilitar protección CSRF (siempre true en producción)
CSRF_ENABLED=true

# --- Proxy y Red ---
# Confiar en headers de proxy (true si usas Nginx/Caddy en producción)
TRUST_PROXY=false

# --- Bootstrap y Migraciones ---
# Esperar a que la DB esté lista antes de iniciar
# true = Útil en Docker Compose (espera a healthcheck de Postgres)
# false = Arranca inmediatamente (desarrollo local con DB ya corriendo)
WAIT_FOR_DB=false

# Ejecutar migraciones automáticamente al iniciar
# true = Ejecuta migraciones al boot (producción con DB_SYNCHRONIZE=false)
# false = No ejecuta migraciones (desarrollo con DB_SYNCHRONIZE=true)
# ⚠️ NOTA: Scripts configurados en package.json pero run-migrations.ts no implementado
#          Actualmente se usa DB_SYNCHRONIZE=true para auto-sync en Docker
RUN_MIGRATIONS=false

# --- Seed Inicial (Opcional) ---
# Crear admin por defecto al iniciar la aplicación
# ⚠️ Solo se ejecuta si la tabla 'admins' está vacía
# 
# Casos de uso:
# - Docker primera vez: SEED_ON_BOOT=true (crea admin automático)
# - Desarrollo local: SEED_ON_BOOT=false (creas admin manualmente)
# - Producción: SEED_ON_BOOT=false (admin ya existe)
#
# SEED_ON_BOOT=true
# SEED_ADMIN_NAME=Administrador
# SEED_ADMIN_EMAIL=admin@demo.com
# SEED_ADMIN_PASSWORD=admin123
